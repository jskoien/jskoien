prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
summary(prediction)
options(error = recover)
library(automap)
library(gstat)
data(meuse)
data(meuse.grid)
coordinates(meuse) = ~x+y
gridded(meuse.grid) = ~x+y
predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
objects()
oldPar
newPar
objects()
names(dots)
dots
library(intamap)
require(intamap)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = log(meuse$zinc)
data(meuse.grid)
gridded(meuse.grid) = ~x+y
proj4string(meuse) = CRS("+init=epsg:28992")
proj4string(meuse.grid) = CRS("+init=epsg:28992")
# First intamap object, no beta parameter so it should be using Ordinary Kriging
iObject = createIntamapObject(
formulaString = value~1,
observations = meuse,
predictionLocations = meuse.grid,
class = "automap"
)
iObject <- preProcess(iObject)
iObject <- estimateParameters(iObject)
iObject <- spatialPredict(iObject)
iObject <- postProcess(iObject)
# Second intamap object, beta = 0 so it should use simple kriging
iObject2 = createIntamapObject(
formulaString = value~1,
observations = meuse,
predictionLocations = meuse.grid,
class = "automap",
params=list(beta=0)
)
iObject2 <- preProcess(iObject2)
iObject2 <- estimateParameters(iObject2)
iObject2 <- spatialPredict(iObject2)
iObject2 <- postProcess(iObject2)
# This line calculates the maximum absolute difference between both predictions and it returns 0, with thes modifications I'm sending to you it returns 2.763533 so the parameters did make a difference.
max(abs(iObject$predictions$var1.pred - iObject2$predictions$var1.pred), na.rm = T)
library(intamap)
?compare.cv
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
# Perform cross-validation
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"), nfold = 10)
kr_dist.cv = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"), nfold = 10)
kr_dist_ffreq.cv = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"), nfold = 10)
# Compare the results
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv)
library(automap)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
# Perform cross-validation
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"), nfold = 10)
kr_dist.cv = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"), nfold = 10)
kr_dist_ffreq.cv = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"), nfold = 10)
# Compare the results
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv)
compare.cv
?interpolate
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), cv = TRUE)
names(x)
names(x$predictions)
p1 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, method = "transGauss"), cv = TRUE)
p2 = x
compare.cv(p1$predictions, p2$predictions)
interpolate
methods(spatialPredict)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, method = "transGaussian"), cv = TRUE)
p2 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, method = "copula"), cv = TRUE)
library(psgp)
install.packages("psgp")
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, model = "copula"), cv = TRUE)
p2 = x
library(psgp)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), optList = list(model = "copula"), cv = TRUE)
p1 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), optList = list(model = "automap"), cv = TRUE)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName "automap", cv = TRUE)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "automap", cv = TRUE)
p1 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "copula", cv = TRUE)
p2 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName "psgp", cv = TRUE)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "psgp", cv = TRUE)
compare.cv(p1$predictions, p2$predictions, p3$predictions)
p3 = x
compare.cv(p1$predictions, p2$predictions, p3$predictions)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
pAutomap = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "automap", cv = TRUE)
pPsgp = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "psgp", cv = TRUE)
pCopula = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "copula", cv = TRUE)
pTransGaussian = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "transGaussian", cv = TRUE)
compare.cv(pAutomap$predictions, pPsgp$predictions, pCopula$predictions, pTransGaussian$predictions)
pIdw = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "idw", cv = TRUE)
pIdw = interpolate(meuse, meuse.grid, list(mean=TRUE), methodName = "idw", cv = TRUE)
compare.cv(pAutomap$predictions, pPsgp$predictions, pCopula$predictions, pTransGaussian$predictions, pInv$predictions)
compare.cv(pAutomap$predictions, pPsgp$predictions, pCopula$predictions, pTransGaussian$predictions, pIdw$predictions)
?interpolate
?compare.cv
estimateAnisotropy
library(intamap)
estimateAnisotropy
library(intamap)
demo(intamap)
warnings()
install.packages(psgp)
install.packages("psgp)
install.packages("psgp")
?intamap
?intamap-package`
?intamapExampleObject
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
summary(newData)
plot(sqrt(var1.ok)~var1.pred,newData)
plot(sqrt(var1.var)~var1.pred,newData)
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
sessionInfo()
library(intamap)
sessionInfo()
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
summary(newData)
sessionInfo()
update.packages()
library(intamap)
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
summary(newData)
library(Rcpp)
sessionInfo()
path.package("Rcpp")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("jskoien/intamap")
library(intamap)
install_github("jskoien/intamap")
library(devtools)
install_github("jskoien/intamap")
install_github("jskoien/intamap")
install_github("jskoien/jskoien/intamap")
sessionInfo()
library(Rcpp)
sessionInfo()
sessionInfo()
install.packges("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("installr")
library(installr)
updateR()
devtools:::install_github("jskoien/jskoien/intamap")
library(intamap)
sessionInfo()
demo(intamap)
?interpolate
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE))
summary(t(x$outputTable))
interpolate
sessionInfo()
aa = rnorm(100)
aa
mean(abs(aa))
aa = rnorm(1000)
mean(abs(aa))
aa = rnorm(100000)
mean(abs(aa))
pnorm(.25)
dnorm(.25)
dnorm(.75)
pnorm(.75)
?rnorm
qnorm(.25)
qnorm(.75)
length(aa)
sum(aa < 0.674 & aa > -0.674)
options(error = recover)
library(intamap)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
meuse$zinc = log(meuse$zinc)
set.seed(112233)
krigingObject = createIntamapObject(
observations = meuse,
predictionLocations = spsample(meuse.grid,5,"regular"),
#	targetCRS = "+init=epsg:3035",
#	boundCRS = "+proj=laea +lat_0=48 +lon_0=9 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m",
#	boundCRS = boundCRS,
#	boundaries = boundaries,
formulaString = as.formula("zinc~1"),
params =  list(debug.level = 1),
outputWhat = list(mean = TRUE, variance = TRUE, MOK=7,IWQSEL = 7,excprob = 7.0)
)
class(krigingObject) = c("automap")
checkSetup(krigingObject)
krigingObject = preProcess(krigingObject)
krigingObject = estimateParameters(krigingObject)
krigingObject = spatialPredict(krigingObject)
krigingObject = postProcess(krigingObject)
summary(krigingObject$outputTable)
class(krigingObject) = c("yamamoto")
checkSetup(krigingObject)
krigingObject = preProcess(krigingObject)
krigingObject = estimateParameters(krigingObject)
krigingObject = spatialPredict(krigingObject)
krigingObject = postProcess(krigingObject)
summary(krigingObject$outputTable)
options(warn = 2)
krigingObject = createIntamapObject(
observations = meuse,
predictionLocations = spsample(meuse.grid,5,"regular"),
#	targetCRS = "+init=epsg:3035",
#	boundCRS = "+proj=laea +lat_0=48 +lon_0=9 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m",
#	boundCRS = boundCRS,
#	boundaries = boundaries,
formulaString = as.formula("zinc~1"),
params =  list(debug.level = 1),
outputWhat = list(mean = TRUE, variance = TRUE, MOK=7,IWQSEL = 7,excprob = 7.0)
)
class(krigingObject) = c("automap")
checkSetup(krigingObject)
krigingObject = preProcess(krigingObject)
krigingObject = estimateParameters(krigingObject)
krigingObject = spatialPredict(krigingObject)
krigingObject = postProcess(krigingObject)
summary(krigingObject$outputTable)
class(krigingObject) = c("yamamoto")
checkSetup(krigingObject)
krigingObject = preProcess(krigingObject)
krigingObject = estimateParameters(krigingObject)
krigingObject = spatialPredict(krigingObject)
krigingObject = postProcess(krigingObject)
summary(krigingObject$outputTable)
debug(intamap:::yamamotoKrige)
krigingObject = spatialPredict(krigingObject)
ikri
options(error = recover)
set.seed(15331)
library(intamap)
library(automap)
library(gstat)
library(psgp)
options(warn = 0)
options(error = recover)
set.seed(15331)
library(intamap)
library(automap)
library(gstat)
library(psgp)
#loadMeuse()
sessionInfo()
crs = CRS("+init=epsg:28992 +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs")
data("meuse")
coordinates(meuse) <- ~x+y
proj4string(meuse) <- crs
data("meuse.grid")
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
proj4string(meuse.grid) <- crs
meuse$value = log(meuse$zinc)
meuse.grid = meuse.grid[sample(1:dim(meuse.grid)[1], 100),]
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T, nsim = 5), methodName = "automap")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid,
optList = list(idpRange = seq(0.1, 2.9, 0.5), nfold = 3),
outputWhat = list(mean=TRUE), methodName = "idw")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T),methodName = "transGaussian")
summary(t(output$outputTable), digits = 4)
set.seed(15331)
data(meuse)
meuse = meuse[sample(dim(meuse)[1],30),]
meuse$value=meuse$zinc
coordinates(meuse) = ~x+y
mgrid = spsample(meuse,10,"regular")
gridded(mgrid) = TRUE
#output1 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
#                     methodName = "copula")
output2 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "copula",optList = list(methodParameters = output1$methodParameters))
options(error = recover)
set.seed(15331)
library(intamap)
library(automap)
library(gstat)
library(psgp)
#loadMeuse()
sessionInfo()
crs = CRS("+init=epsg:28992 +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs")
data("meuse")
coordinates(meuse) <- ~x+y
proj4string(meuse) <- crs
data("meuse.grid")
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
proj4string(meuse.grid) <- crs
meuse$value = log(meuse$zinc)
meuse.grid = meuse.grid[sample(1:dim(meuse.grid)[1], 100),]
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T, nsim = 5), methodName = "automap")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid,
optList = list(idpRange = seq(0.1, 2.9, 0.5), nfold = 3),
outputWhat = list(mean=TRUE), methodName = "idw")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T),methodName = "transGaussian")
summary(t(output$outputTable), digits = 4)
set.seed(15331)
data(meuse)
meuse = meuse[sample(dim(meuse)[1],30),]
meuse$value=meuse$zinc
coordinates(meuse) = ~x+y
mgrid = spsample(meuse,10,"regular")
gridded(mgrid) = TRUE
output1 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "copula")
output2 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "copula",optList = list(methodParameters = output1$methodParameters))
output3 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "automap",optList = list(model = c("Exp", "Sph")), cv = TRUE)
output4 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "psgp", cv = TRUE)
output5 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), cv = TRUE, methodName = "automap")
output6 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), optList = list(variogramModel = output5$variogramModel),
cv = TRUE)
output6$variogramModel$range[2] = 1000
output7 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
cv = TRUE, optList = list(variogramModel = output6$variogramModel))
output8 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
cv = TRUE, optList = list(nclus = 4), methodName = "automap")
all.equal(output5$predictions, output6$predictions) # Should be the same
all.equal(output5$predictions, output8$predictions) # Should be the same
all.equal(output5$predictions, output7$predictions)  # Should be different
summary(t(output$outputTable), digits = 4)
output2$outputTable - output1$outputTable
summary(output3$predictions, digits = 4)
summary(output4$predictions, digits = 4)
options(error = recover)
set.seed(15331)
library(intamap)
library(automap)
library(gstat)
library(psgp)
#loadMeuse()
sessionInfo()
crs = CRS("+init=epsg:28992 +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs")
data("meuse")
coordinates(meuse) <- ~x+y
proj4string(meuse) <- crs
data("meuse.grid")
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
proj4string(meuse.grid) <- crs
meuse$value = log(meuse$zinc)
meuse.grid = meuse.grid[sample(1:dim(meuse.grid)[1], 100),]
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T, nsim = 5), methodName = "automap")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid,
optList = list(idpRange = seq(0.1, 2.9, 0.5), nfold = 3),
outputWhat = list(mean=TRUE), methodName = "idw")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T),methodName = "transGaussian")
summary(t(output$outputTable), digits = 4)
set.seed(15331)
data(meuse)
meuse = meuse[sample(dim(meuse)[1],15),]
meuse$value=meuse$zinc
coordinates(meuse) = ~x+y
mgrid = spsample(meuse,10,"regular")
gridded(mgrid) = TRUE
output1 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "copula")
skip_on_cran()
??skip_on_cran
R_session()
Sys.info()$sysname == "windows"
Sys.info()
str(Sys.info())
Sys.info()$sysname
Sys.info()[,"sysname"]
names(Sys.info())
names(Sys.info())
Sys.info()["sysname"]
Sys.info()["sysname"] == "windows"
Sys.info()["sysname"]
Sys.info()["sysname"] == "Windows"
packageDescription("automap")
sessionInfo()
