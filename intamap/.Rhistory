sats$ISO3[is.na(sats$pl)]
att = c(0,1,5.1,10.1,15.1, 20.1,30.1, 65)
att = c(0,1,5.1,10.1,20.1, 40.1,60.1, 70)
#spplot(countries, "nsen", col.regions = heat.colors(length(att))[length(att):1], at = att, main = "Missions per country", cex = 2, cex.lab = 2, cex.axis = 2)
pids = which(countries$plsen > 1)
pcols = gray(round(1-plsen[pids]/max(plsen)))
pcols = ifelse(plsen[pids] < 6, "#999999", "#000000")
ccols = bpy.colors(length(att)-1)
ccols[length(ccols)-1] = "#FFFFFF"
countries$csen = findInterval(countries$nsen,att)
spplot(countries, "nsen", col.regions = ccols, at = att, # main = "Missions per country",
cex = 2, cex.lab = 2, cex.axis = 2,par.settings=list(fontsize=list(text=80)),
#   colorkey = list(labels=list(
#      at = 1:length(ccols),
#     labels = round(att,0))),
panel = function(x,y, ...){
panel.polygonsplot(x,y, ...)
sp.text(coordinates(countries)[pids,], countries$plsen[pids],
col = pcols, pch = 1, cex = 1, font =2)
})
dev.off()
# Satellite country text
# Textplot
sats = satsAll
s1 = sats$S1
conts = sats$Country
levels(conts) = c(levels(conts), "Argentina", "Brazil")
conts[grep("France", conts)] = "France"
conts[grep("ESA", conts)] = "ESA"
conts[grep("EU", conts)] = "ESA"
conts[grep("Argentina", conts)] = "Argentina"
conts[grep("Brazil", conts)] = "Brazil"
conts = factor(conts)
lconts = levels(conts)
yrs = 1971:lastyear
conts = sats$ISO3
levels(conts) = c(levels(conts), "BRA", "Arg")
conts[grep("BRA", conts)] = "BRA"
conts[grep("EUR", conts)] = "EUR"
conts = factor(conts)
lconts = levels(conts)
png("countryYears.png", width = 2000, height = 1200)
par(xpd=T, mar= c(5, 6, 3, 2) + 0.1, mex = 1.5)
aconts = factor(NULL, levels = lconts)
cmat = matrix(ncol = length((lconts)), nrow = length(yrs))
plot.new()
plot.window(xlim = c(1,length(lconts)+1), ylim = c(1970, 2020))
axis(2, cex.axis = 2)
axis(1, cex.axis = 2)
title(xlab = "Countries", ylab = "Year", cex.lab = 2)
for (isat in 1:dim(sats)[1]){
yr = year(sats$From[isat])
cont = conts[isat]
if (is.na(cont)) next
i1 = grep(cont, aconts)
#if (sum(is.na(i1)) > 1) i1 = numeric(0)
if (length(i1) == 0) {
i1 = length(aconts) + 1
aconts[i1] = cont
}
#  if (is.na(cmat[yr-1970,i1]))
text(i1, yr, lconts[cont], cex = 1.7, font = ifelse(is.na(s1[isat]),1,2))
cmat[yr-1970,i1] = lconts[cont]
}
for (iyr in 1:4) {
lines(c(0,length(lconts)+1),rep(1970+iyr*10-0.5, 2),lty = 2)
}
dev.off()
# Primary sat:
sats = satsAll
conts = sats$Country
levels(conts) = c(levels(conts), "Brazil", "Argentina")
conts[grep("France", conts)] = "France"
conts[grep("ESA", conts)] = "ESA"
conts[grep("EU", conts)] = "ESA"
conts[grep("Argentina", conts)] = "Argentina"
conts[grep("Brazil", conts)] = "Brazil"
conts = factor(conts)
lconts = levels(conts)
ids = which(!duplicated(conts))
lsat = sats[ids,]
syr = year(sats$From)
ssyr =  (syr %/% 5) * 5 + 2
p1 = aggregate(sats$P1, by = list(ssyr), FUN = function(x) min(x, na.rm = TRUE))
m1 = aggregate(sats$M1, by = list(ssyr), FUN = function(x) min(x, na.rm = TRUE))
s1 = aggregate(sats$S1, by = list(ssyr), FUN = function(x) min(x, na.rm = TRUE))
options(error = recover)
set.seed(15331)
library(intamap)
library(automap)
library(gstat)
library(psgp)
#loadMeuse()
sessionInfo()
crs = CRS("+init=epsg:28992 +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs")
data("meuse")
coordinates(meuse) <- ~x+y
proj4string(meuse) <- crs
data("meuse.grid")
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
proj4string(meuse.grid) <- crs
meuse$value = log(meuse$zinc)
meuse.grid = meuse.grid[sample(1:dim(meuse.grid)[1], 100),]
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T, nsim = 5), methodName = "automap")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid,
optList = list(idpRange = seq(0.1, 2.9, 0.5), nfold = 3),
outputWhat = list(mean=TRUE), methodName = "idw")
summary(t(output$outputTable), digits = 4)
output = interpolate(meuse, meuse.grid, list(mean=T, variance=T),methodName = "transGaussian")
summary(t(output$outputTable), digits = 4)
data(meuse)
meuse = meuse[sample(dim(meuse)[1],30),]
meuse$value=meuse$zinc
coordinates(meuse) = ~x+y
mgrid = spsample(meuse,10,"regular")
gridded(mgrid) = TRUE
output1 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "copula")
output2 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "copula",optList = list(methodParameters = output1$methodParameters))
output3 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "automap",optList = list(model = c("Exp", "Sph")), cv = TRUE)
output4 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5),
methodName = "psgp", cv = TRUE)
output5 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), cv = TRUE, methodName = "automap")
output6 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), optList = list(variogramModel = output5$variogramModel),
cv = TRUE)
output6$variogramModel$range[2] = 1000
output7 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), optList = list(variogramModel = output6$variogramModel),
cv = TRUE)
output8 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), cv = TRUE, nclus = 4, methodName = "automap")
interpolate
output8 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), cv = TRUE, optlist = list(nclus = 4), methodName = "automap")
output8 = interpolate(meuse, mgrid, list(mean=T, variance=T, excprob = 1000,quantile = 0.5), cv = TRUE, optList = list(nclus = 4), methodName = "automap")
all.equal(output5$predictions, output6$predictions) # Should be the same
all.equal(output5$predictions, output8$predictions) # Should be the same
q()
if.test
ifTest
library(intamap)
packageDescription(intamap)
packageDescription("intamap")
data(meuse)
data(meuse.grid)
coordinates(meuse) = ~x+y
gridded(meuse.grid) = ~x+y
predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
summary(prediction)
}
data(meuse)
data(meuse.grid)
coordinates(meuse) = ~x+y
gridded(meuse.grid) = ~x+y
predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
summary(prediction)
}
library(automap)
library(gstat)
data(meuse)
data(meuse.grid)
coordinates(meuse) = ~x+y
gridded(meuse.grid) = ~x+y
predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
summary(prediction)
options(error = recover)
library(automap)
library(gstat)
data(meuse)
data(meuse.grid)
coordinates(meuse) = ~x+y
gridded(meuse.grid) = ~x+y
predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
oldPar
newPar
object$params
str(object)
?unbiasedKrige
?idw
library(intamap)
library(automap)
library(gstat)
data(meuse)
data(meuse.grid)
coordinates(meuse) = ~x+y
gridded(meuse.grid) = ~x+y
predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
summary(prediction)
options(error = recover)
library(automap)
library(gstat)
data(meuse)
data(meuse.grid)
coordinates(meuse) = ~x+y
gridded(meuse.grid) = ~x+y
predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
summary(prediction)
prediction <- unbiasedKrige(prediction,log(zinc)~1,
meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0),
iwqmaxit = 100, iwqCpAddLim = 0.01)
objects()
oldPar
newPar
objects()
names(dots)
dots
library(intamap)
require(intamap)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = log(meuse$zinc)
data(meuse.grid)
gridded(meuse.grid) = ~x+y
proj4string(meuse) = CRS("+init=epsg:28992")
proj4string(meuse.grid) = CRS("+init=epsg:28992")
# First intamap object, no beta parameter so it should be using Ordinary Kriging
iObject = createIntamapObject(
formulaString = value~1,
observations = meuse,
predictionLocations = meuse.grid,
class = "automap"
)
iObject <- preProcess(iObject)
iObject <- estimateParameters(iObject)
iObject <- spatialPredict(iObject)
iObject <- postProcess(iObject)
# Second intamap object, beta = 0 so it should use simple kriging
iObject2 = createIntamapObject(
formulaString = value~1,
observations = meuse,
predictionLocations = meuse.grid,
class = "automap",
params=list(beta=0)
)
iObject2 <- preProcess(iObject2)
iObject2 <- estimateParameters(iObject2)
iObject2 <- spatialPredict(iObject2)
iObject2 <- postProcess(iObject2)
# This line calculates the maximum absolute difference between both predictions and it returns 0, with thes modifications I'm sending to you it returns 2.763533 so the parameters did make a difference.
max(abs(iObject$predictions$var1.pred - iObject2$predictions$var1.pred), na.rm = T)
library(intamap)
?compare.cv
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
# Perform cross-validation
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"), nfold = 10)
kr_dist.cv = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"), nfold = 10)
kr_dist_ffreq.cv = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"), nfold = 10)
# Compare the results
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv)
library(automap)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
# Perform cross-validation
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"), nfold = 10)
kr_dist.cv = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"), nfold = 10)
kr_dist_ffreq.cv = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"), nfold = 10)
# Compare the results
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv)
compare.cv
?interpolate
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), cv = TRUE)
names(x)
names(x$predictions)
p1 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, method = "transGauss"), cv = TRUE)
p2 = x
compare.cv(p1$predictions, p2$predictions)
interpolate
methods(spatialPredict)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, method = "transGaussian"), cv = TRUE)
p2 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, method = "copula"), cv = TRUE)
library(psgp)
install.packages("psgp")
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE, model = "copula"), cv = TRUE)
p2 = x
library(psgp)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), optList = list(model = "copula"), cv = TRUE)
p1 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), optList = list(model = "automap"), cv = TRUE)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName "automap", cv = TRUE)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "automap", cv = TRUE)
p1 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "copula", cv = TRUE)
p2 = x
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName "psgp", cv = TRUE)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "psgp", cv = TRUE)
compare.cv(p1$predictions, p2$predictions, p3$predictions)
p3 = x
compare.cv(p1$predictions, p2$predictions, p3$predictions)
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
pAutomap = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "automap", cv = TRUE)
pPsgp = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "psgp", cv = TRUE)
pCopula = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "copula", cv = TRUE)
pTransGaussian = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "transGaussian", cv = TRUE)
compare.cv(pAutomap$predictions, pPsgp$predictions, pCopula$predictions, pTransGaussian$predictions)
pIdw = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE), methodName = "idw", cv = TRUE)
pIdw = interpolate(meuse, meuse.grid, list(mean=TRUE), methodName = "idw", cv = TRUE)
compare.cv(pAutomap$predictions, pPsgp$predictions, pCopula$predictions, pTransGaussian$predictions, pInv$predictions)
compare.cv(pAutomap$predictions, pPsgp$predictions, pCopula$predictions, pTransGaussian$predictions, pIdw$predictions)
?interpolate
?compare.cv
estimateAnisotropy
library(intamap)
estimateAnisotropy
library(intamap)
demo(intamap)
warnings()
install.packages(psgp)
install.packages("psgp)
install.packages("psgp")
?intamap
?intamap-package`
?intamapExampleObject
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
summary(newData)
plot(sqrt(var1.ok)~var1.pred,newData)
plot(sqrt(var1.var)~var1.pred,newData)
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
sessionInfo()
library(intamap)
sessionInfo()
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
summary(newData)
sessionInfo()
update.packages()
library(intamap)
library(gstat)
library(automap)
data(sic2004)
coordinates(sic.val) = ~x+y
coordinates(sic.test) = ~x+y
variogramModel = autofitVariogram(joker~1,sic.val)$var_model
newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
summary(newData)
library(Rcpp)
sessionInfo()
path.package("Rcpp")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("jskoien/intamap")
library(intamap)
install_github("jskoien/intamap")
library(devtools)
install_github("jskoien/intamap")
install_github("jskoien/intamap")
install_github("jskoien/jskoien/intamap")
sessionInfo()
library(Rcpp)
sessionInfo()
sessionInfo()
install.packges("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("installr")
library(installr)
updateR()
devtools:::install_github("jskoien/jskoien/intamap")
library(intamap)
sessionInfo()
demo(intamap)
?interpolate
data(meuse)
coordinates(meuse) = ~x+y
meuse$value = meuse$zinc
data(meuse.grid)
gridded(meuse.grid) = ~x+y
x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE))
summary(t(x$outputTable))
interpolate
sessionInfo()
aa = rnorm(100)
aa
mean(abs(aa))
aa = rnorm(1000)
mean(abs(aa))
aa = rnorm(100000)
mean(abs(aa))
pnorm(.25)
dnorm(.25)
dnorm(.75)
pnorm(.75)
?rnorm
qnorm(.25)
qnorm(.75)
length(aa)
sum(aa < 0.674 & aa > -0.674)
