install.packages("intamap")
library(rtop)
install.packages(c("rgeos", "data.table". "reshape2"))
install.packages(c("rgeos", "data.table", "reshape2"))
library(here)
?here
?STS
?createRtopObject
library(rtop)
?createRtopObject
library(sf)
rpath = system.file("extdata",package="rtop")
observations = st_read(rpath,"observations")
# Create a column with the specific runoff:
observations$obs = observations$QSUMMER_OB/observations$AREASQKM
params = list(gDist = TRUE, cloud = FALSE)
# Create a column with the specific runoff:
observations$obs = observations$QSUMMER_OB/observations$AREASQKM
# Build an object
rtopObj = createRtopObject(observations, predictionLocations,
params = params)
predictionLocations = st_read(rpath,"predictionLocations")
params = list(gDist = TRUE, cloud = FALSE)
# Create a column with the specific runoff:
observations$obs = observations$QSUMMER_OB/observations$AREASQKM
# Build an object
rtopObj = createRtopObject(observations, predictionLocations,
params = params)
inherits(observations, "sf")
spobs = readOGR(rpath,"observations")
library(rgdal)
spobs = readOGR(rpath,"observations")
inherits(spobs, "Spatial")
library(spacetime)
??spacetime
?STS
sp = cbind(x = c(0,0,1), y = c(0,1,1))
row.names(sp) = paste("point", 1:nrow(sp), sep="")
library(sp)
sp = SpatialPoints(sp)
library(xts)
time = xts(1:4, as.POSIXct("2010-08-05")+3600*(10:13))
m = c(10,20,30) # means for each of the 3 point locations
mydata = rnorm(length(sp)*length(time),mean=rep(m, 4))
IDs = paste("ID",1:length(mydata))
mydata = data.frame(values = signif(mydata,3), ID=IDs)
stfdf = STFDF(sp, time, mydata)
class(stfdf)
inherits(stfdf, "Spatial")
inherits(stfdf)
class(spobj)
class(spobs)
getSlots("STS")
?gstat
?fit.variogram
variogram
methods(variogram)
fun = function(x) {x = 2; print(missing(x))}
fun(2)
fun()
?createRtopObject
objects()
class(observations)
st_area(observations)
names(observations)
observations$area = st_area(observations)
proj4string(observations)
?st_precision
st_crs(observations)
?sort
all.equal(is.na(st_crs(observations)), is.na(st_crs(predictionLocations)))
st_crs(observations) != st_crs(predictionLocations)
class(observations)
str(observations)
observations@data
data.frame(observations)
data.frame(observations)[,-"geometry"]
names(data.frame(observations))
data.frame(observations)[,-"geometry"]
df = data.frame(observations)
df = df[,-which(names(df) == "geometry" )]
df
coordinates(observations)
st_coordinates(observations)
object = observations
df = data.frame(object)
obs = df[,-which(names(df) == "geometry")]
coordinates(obs) = coordinates(object)
coordinates(obs) = st_coordinates(object)
dim(obs)
dim(object)
dim(coordinates(object))
dim(st_coordinates(object))
st_centroid(object)
st_coordinates(st_centroids(object))
st_coordinates(st_centroid(object))
coordinates(obs) = st_coordinates(st_centroid(object))
if (!"area" %in% names(obs)) obs$area = st_area(object)
tt = rtopVariogram(obs, ...)
tt = rtopVariogram(obs)
options(error = recover)
tt = rtopVariogram(obs)
obs$area
drop_units(obs$area)
units:::drop_units(obs$area)
obs$area
units(obs$area)
units(obs$observations)
units(obs$obs)
names(obs)
?units
units:::drop_unit(obs$obs)
units:::drop_units(obs$obs)
set_units(obs$obs, NULL)
units:::set_units(obs$obs, NULL)
objects()
class(spobs)
data.frame(spobs)
abins = adfunc(NULL, observations, amul)
abins = rtop:::adfunc(NULL, observations, amul)
abins = rtop:::adfunc(NULL, observations, 5)
observations$area = set_units(observations$area, NULL)
observations$area = units:::set_units(observations$area, NULL)
abins = rtop:::adfunc(NULL, observations, 5)
abins = rtop:::adfunc(NULL, observations, 3)
observations$acl = rtop:::findInterval(observations$area, abins)
rtop:::findInterval
rtop:::findInterval
abins = rtop:::adfunc(NULL, observations, 3)
observations$acl = findInterval(observations$area, abins)
observations$acl
aggregate(observations[,as.character(formulaString[[2]])],
by = list(acl = observations$acl), FUN = var)
names(observations)
aggregate(observations[,"obs",
by = list(acl = observations$acl), FUN = var)
aggregate(observations[,"obs"],
by = list(acl = observations$acl), FUN = var)
?st_sample
lapply(observations, FUN = function(pol) st_sample(pol,100,"random",offset=c(0.5,0.5))))
lapply(observations, FUN = function(pol) st_sample(pol,100,"random",offset=c(0.5,0.5)))
lapply(observations, class)
lapply(observations$geometry, class)
resol = 100
stype = "regular"
lapply(object$geometry,FUN=function(pol) st_sample(pol,resol,stype,offset=c(0.5,0.5)))
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype,offset=c(0.5,0.5)))
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype, offset=c(0.5,0.5)))[1,]
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype, offset=c(0.5,0.5)))[1]
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype)[1]
)
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype))[1]
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype, offset=c(0.5,0.5)))[1]
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype, offset=c(0.5,0.5)))[1]
?spsample
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype))[1]
lapply(object$geometry,FUN=function(pol) st_sample(pol,size = resol, type = stype))[1]
bbArea
rtop:::bbArea
st_bbox(observations)
bbox(spobs)
rtop:::bbArea(st_bbox(observations))
512000-392000
543000-454900
120000*88000
observations$geometry[[1]]
observations$geometry[1]
st_bbox(observations$geometry[1])
lpoly = observations$geometry[1]
ba = st_bbox(lpoly)
ipts = resol-1
ires = ires0
ires0 = 1
ba = st_bbox(lpoly)
ipts = resol-1
ires = ires0
ires = ires*2
xd = bbdia/(ires)
bb
bbdia = sqrt(bbArea(st_bbox(object)))
bbdia = sqrt(rtop:::bbArea(st_bbox(object)))
xd = bbdia/(ires)
bbArea(ba)/(xd*xd) > (resol-2)
rtop:::bbArea(ba)/(xd*xd) > (resol-2)
ires
ires = 20
ires = ires*2
xd = bbdia/(ires)
rtop:::bbArea(ba)/(xd*xd) > (resol-2)
ires = 100
xd = bbdia/(ires)
rtop:::bbArea(ba)/(xd*xd) > (resol-2)
x = seq(bb[[1]]-small,bb[[3]]+small,xd)
bb = st_bbox(observations)
x = seq(bb[[1]]-small,bb[[3]]+small,xd)
small = bbdia/100
nps = length(object@polygons)
spp = vector("list",nps)
x = seq(bb[[1]]-small,bb[[3]]+small,xd)
y = seq(bb[[2]]-small,bb[[4]]+small,xd)
x = x[x > ba[[1]] & x < ba[[3]] ]
y = y[y > ba[[2]] & y < ba[[4]] ]
pts = expand.grid(x=x,y=y)
pts
pts = st_as_sf(pts)
pts = st_as_sf(pts, coords = c("x". "y"))
pts = st_as_sf(pts, coords = c("x", "y"))
pts
lpoly
pts = pts[!is.na(over(pts,lpoly)),]
dim(pts)
pts = pts[!is.na(st_overlaps(pts,lpoly)),]
st_crs(pts)
st_crs(lpoly)
if (!is.na(st_crs(lpoly))) st_set_crs(lpoly, NA)
if (!is.na(st_crs(lpoly))) lpoly = st_set_crs(lpoly, NA)
st_crs(lpoly)
pts = pts[!is.na(st_overlaps(pts,lpoly)),]
dim(pts)
st_overlaps(pts, lpoly)
table(st_overlaps(pts, lpoly))
summary(st_overlaps(pts, lpoly))
lpoly
pts
plot(lpoly)
plot(pts, add = TRUE)
?st_overlaps
st_overlaps(lpoly, pts)
st_within(pts, lpoly)
pts2 = pts[st_within(pts, lpoly)]
pts2 = pts[st_within(pts, lpoly),]
str(st_within(pts, lpoly))
str(unlist(st_within(pts, lpoly)))
str(which(st_within(pts, lpoly))
)
st_intersects(pts, lpoly)
st_intersects(lpoly, pts)
str(st_intersects(lpoly, pts))
pts
pp = pts[st_intersects(lpoly, pts)]
pp = pts[st_intersects(lpoly, pts)[[1]]]
dim(pts)
pp = pts[st_intersects(lpoly, pts)[[1]],1]
pp
plot(pp, col = "red", add = TRUE)
dim(pp)
ires = 1
while (ipts < resol) {
ires = ires*2
xd = bbdia/(ires)
if (bbArea(ba)/(xd*xd) > (resol-2)) {
x = seq(bb[[1]]-small,bb[[3]]+small,xd)
y = seq(bb[[2]]-small,bb[[4]]+small,xd)
x = x[x > ba[[1]] & x < ba[[3]] ]
y = y[y > ba[[2]] & y < ba[[4]] ]
pts = expand.grid(x=x,y=y)
if (dim(pts)[1] >= 1) {
pts = st_as_sf(pts, coords = c("x", "y"))
pts = pts[st_intersects(lpoly, pts)[[1]],1]
ipts = dim(pts)[1]
}
}
}
bbArea = rtop:::bbArea
while (ipts < resol) {
ires = ires*2
xd = bbdia/(ires)
if (bbArea(ba)/(xd*xd) > (resol-2)) {
x = seq(bb[[1]]-small,bb[[3]]+small,xd)
y = seq(bb[[2]]-small,bb[[4]]+small,xd)
x = x[x > ba[[1]] & x < ba[[3]] ]
y = y[y > ba[[2]] & y < ba[[4]] ]
pts = expand.grid(x=x,y=y)
if (dim(pts)[1] >= 1) {
pts = st_as_sf(pts, coords = c("x", "y"))
pts = pts[st_intersects(lpoly, pts)[[1]],1]
ipts = dim(pts)[1]
}
}
}
ipts
resol
ip = 1
object$geometry[ip]
class(object)
a = 2
sessionInfo()
sessionInfo()
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
