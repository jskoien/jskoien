??CRS
??proj4string
st_is_longlat(input_data)
st_is_longlat
library(automap)
options(error = recover)
options(digits=6)
library(automap)
library(sp)
options(warn = 1)
options(digits=6)
library(automap)
library(sp)
library(sf)
# Data preparation
data(meuse)
coordinates(meuse) =~ x+y
data(meuse.grid)
gridded(meuse.grid) =~ x+y
# Fitting some variograms
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500))
variogram
# ...and diable the merging, note the difference between the two plots
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500, merge.small.bins = FALSE))
variogram
# Ordinary kriging
kriging_result = autoKrige(zinc~1, meuse, meuse.grid)
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
kriging_result = autoKrige(zinc~1, meuse, meuse.grid, fix.values = c(0.2,NA,NA))
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
# Universal kriging
kriging_result = autoKrige(zinc~soil+ffreq+dist, meuse, meuse.grid)
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
# Block kriging
kriging_result = autoKrige(zinc~soil+ffreq+dist, meuse, meuse.grid, block = c(400,400))
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
# Kriging with power model
kriging_result = autoKrige(zinc~soil+ffreq+dist, meuse, meuse.grid, model = "Pow")
# Testing with sf objects
meuse = as(meuse, "sf")
meuse.grid = as(meuse.grid, "sf")
# Fitting some variograms
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500))
variogram
# ...and diable the merging, note the difference between the two plots
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500, merge.small.bins = FALSE))
variogram
# Ordinary kriging
kriging_result = autoKrige(zinc~1, meuse, meuse.grid)
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
kriging_result = autoKrige(zinc~1, meuse, meuse.grid, fix.values = c(0.2,NA,NA))
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
# Universal kriging
kriging_result = autoKrige(zinc~soil+ffreq+dist, meuse, meuse.grid)
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
# Block kriging
kriging_result = autoKrige(zinc~soil+ffreq+dist, meuse, meuse.grid, block = c(400,400))
summary(kriging_result)
pos = posPredictionInterval(kriging_result, 95, 75)
summary(pos)
# Kriging with power model
kriging_result = autoKrige(zinc~soil+ffreq+dist, meuse, meuse.grid, model = "Pow")
library(automap)
library(sp)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"))
kr_dist.cv = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"))
kr_dist_ffreq.cv = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"))
summary(kr.cv)
summary(kr_dist.cv)
summary(kr_dist_ffreq.cv)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv)
meuse = as(meuse, "sf")
meuse.grid = as(meuse.grid, "sf")
kr.cv.sf = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"))
kr_dist.cv.sf = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"))
kr_dist_ffreq.cv.sf = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"))
summary(kr.cv.sf)
summary(kr_dist.cv.sf)
summary(kr_dist_ffreq.cv.sf)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv, kr.cv.sf, kr_dist.cv.sf, kr_dist_ffreq.cv.sf)
?autoKrige
data(meuse)
coordinates(meuse) =~ x+y
data(meuse.grid)
gridded(meuse.grid) =~ x+y
# Ordinary kriging, no new_data object
kriging_result = autoKrige(zinc~1, meuse)
plot(kriging_result)
# Ordinary kriging
kriging_result = autoKrige(zinc~1, meuse, meuse.grid)
plot(kriging_result)
# Fixing the nugget to 0.2
kriging_result = autoKrige(zinc~1, meuse,
meuse.grid, fix.values = c(0.2,NA,NA))
plot(kriging_result)
# Universal kriging
kriging_result = autoKrige(zinc~soil+ffreq+dist, meuse, meuse.grid)
plot(kriging_result)
# Block kriging
kriging_result_block = autoKrige(zinc~soil+ffreq+dist,
meuse, meuse.grid, block = c(400,400))
plot(kriging_result_block)
# Dealing with duplicate observations
data(meuse)
meuse.dup = rbind(meuse, meuse[1,]) # Create duplicate
coordinates(meuse.dup) = ~x+y
kr = autoKrige(zinc~dist, meuse.dup, meuse.grid)
# Extracting parts from the autoKrige object
prediction_spdf = kr$krige_output
sample_variogram = kr$exp_var
variogram_model = kr$var_model
sessionInfo()
packageDescription("sf")
library(automap)
packageDescription("sp")
# Data preparation
data(meuse)
coordinates(meuse) =~ x+y
data(meuse.grid)
gridded(meuse.grid) =~ x+y
# Testing with sf objects
meuse = as(meuse, "sf")
meuse.grid = as(meuse.grid, "sf")
# Fitting some variograms
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500))
variogram
# ...and diable the merging, note the difference between the two plots
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500, merge.small.bins = FALSE))
variogram
# Ordinary kriging
kriging_result = autoKrige(zinc~1, meuse, meuse.grid)
sessionInfo()
?automapPlot
data(meuse)
coordinates(meuse) =~ x+y
data(meuse.grid)
gridded(meuse.grid) =~ x+y
kriging_result = autoKrige(zinc~1, meuse, meuse.grid)
# Adding the sp.layout parameter shows the locations of the measurements
automapPlot(kriging_result$krige_output, "var1.pred",
sp.layout = list("sp.points", meuse))
?sf-class
?sf
?sf-class
?Spatial
?sp
?sf
?plot.sf
kriging_result
meuse = as(meuse, "sf")
meuse.grid = as(meuse.grid, "sf")
kriging_result = autoKrige(log(zinc)~1, meuse, meuse.grid)
# Adding the meuse points shows the locations of the measurements
plot(kriging_result, points = meuse)))
meuse = as(meuse, "sf")
meuse.grid = as(meuse.grid, "sf")
kriging_result = autoKrige(log(zinc)~1, meuse, meuse.grid)
# Adding the meuse points shows the locations of the measurements
plot(kriging_result, points = meuse)
?posPredictionInterval
pos = posPredictionInterval(kriging_result, 95, 75)
plot(pos)
options(error = recover)
class(pos)
plot(pos)
x
pos_prediction = x$pos_prediction
inherits(pos_prediction, "sf")
os_prediction = as(pos_prediction, "Spatial")
class(os_prediction)
library(stars)
??stars
meuse.grid = as(meuse.grid, "stars")
mm = st_as_stars(meuse.grid)
meuse.grid = st_as_stars(meuse.grid)
kriging_result = autoKrige(zinc~1, meuse,
meuse.grid, fix.values = c(0.2,NA,NA))
data(meuse)
coordinates(meuse) = ~x+y
meuse = st_as_sf(meuse)
meuse.grid = st_as_stars(meuse.grid)
kriging_result = autoKrige(zinc~1, meuse,
meuse.grid, fix.values = c(0.2,NA,NA))
install.packages("lucas")
sessionInfo()
packageDescription("rgeos")
sessionInfo()
library(sp)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
# Perform cross-validation
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"), nfold = 10)
library(automap)
library(sp)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
# Perform cross-validation
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"), nfold = 10)
kr_dist.cv = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"), nfold = 10)
kr_dist_ffreq.cv = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"), nfold = 10)
# Compare the results
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"))
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"),
plot.diff = TRUE)
library(ggplot2)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"),
ggplot = TRUE)
options(error = recover)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"),
ggplot = TRUE)
dots
names(dots)
str(dots)
length(dots)
zcol
layout
addPoly
?cv.compare.ggplot
?compare.cv
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"),
ggplot = TRUE)
addPoly
get_breaks
ggplot2:::get_breaks
names(list(...))
list(...)
self
self
str(self)
self
self
self$breaks
self$breaks
self$lalalal
continuous_scale_sorted
scale
scale$get_breaks
scale$get_breaks(continuous_scale_sorted)
debug(scale$get_breaks)
scale$get_breaks(continuous_scale_sorted)
scale$get_breaks
self
scale
str(scale)
scale
str(scale)
scale$breaks
self$breaks
str(self)
view_scales_from_scale
self$breaks
scale$breaks
?scale_x_continuous
library(automap)
library(sp)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
# Perform cross-validation
kr.cv = autoKrige.cv(log(zinc)~1, meuse, model = c("Exp"), nfold = 10)
kr_dist.cv = autoKrige.cv(log(zinc)~sqrt(dist), meuse,
model = c("Exp"), nfold = 10)
kr_dist_ffreq.cv = autoKrige.cv(log(zinc)~sqrt(dist)+ffreq,
meuse, model = c("Exp"), nfold = 10)
# Compare the results
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"))
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"),
plot.diff = TRUE)
library(ggplot2)
compare.cv(kr.cv, kr_dist.cv, kr_dist_ffreq.cv,
bubbleplots = TRUE, col.names = c("OK","UK1","UK2"),
ggplot = TRUE)
library(sp)
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc~1,meuse)
plot(variogram)
# Residual variogram
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse)
plot(variogram)
# Settings additional fitting options
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(merge.small.bins = FALSE))
plot(variogram)
# Settings the minimum number of pairs per bin quite high
# to see the effect of merging bins
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500))
plot(variogram)
# ...and disable the merging, note the difference between the two plots
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500, merge.small.bins = FALSE))
plot(variogram)
vm.isotropic = autofitVariogram(log(zinc) ~ dist, meuse)
vm.anisotropic = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
vm.anisotropic
warnings()
library(sp)
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc~1,meuse)
plot(variogram)
# Residual variogram
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse)
plot(variogram)
# Settings additional fitting options
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(merge.small.bins = FALSE))
plot(variogram)
# Settings the minimum number of pairs per bin quite high
# to see the effect of merging bins
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500))
plot(variogram)
# ...and disable the merging, note the difference between the two plots
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500, merge.small.bins = FALSE))
plot(variogram)
## No test:
# An example of autofitVariogram with anisotropic sample variogram.
# This is not supported, see details section.
vm.isotropic = autofitVariogram(log(zinc) ~ dist, meuse)
vm.anisotropic = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
## End(No test)
warnings()
update.packages()
debug(autofitVariogram)
library(sp)
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc~1,meuse)
plot(variogram)
test_models
SSerr_list
warnings()
sessionInfo()
update.packages()
rm(list = ls())
update.packages()
sessionInfo()
packageDescription("sf")
install.packages("sf")
library(automap)
library(sp)
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc~1,meuse)
plot(variogram)
# Residual variogram
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse)
plot(variogram)
# Settings additional fitting options
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(merge.small.bins = FALSE))
plot(variogram)
# Settings the minimum number of pairs per bin quite high
# to see the effect of merging bins
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500))
plot(variogram)
# ...and disable the merging, note the difference between the two plots
variogram = autofitVariogram(zinc ~ soil + ffreq + dist, meuse,
miscFitOptions = list(min.np.bin = 500, merge.small.bins = FALSE))
plot(variogram)
## No test:
# An example of autofitVariogram with anisotropic sample variogram.
# This is not supported, see details section.
vm.isotropic = autofitVariogram(log(zinc) ~ dist, meuse)
vm.anisotropic = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
## End(No test)
warnings()
debug(autofitVariogram)
library(sp)
data(meuse)
coordinates(meuse) =~ x+y
variogram = autofitVariogram(zinc~1,meuse)
plot(variogram)
vm.anisotropic = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
options(warn = 2)
options(warn = 1)
vm.anisotropic = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
options(error = recover)
debug(getModel)
options(warn = 2)
options(warn = 1)
vm.anisotropic = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
options(error = recover)
options(warn = 2)
obj
undebug(autofitVariogram)
options(warn = 1)
res = list()
for (ii in 1:000) res[[ii]] = vm.anisotropic = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
ii
options(error = recover)
for (ii in 1:000) res[[ii]] = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
ii
for (ii in 1:1000) res[[ii]] = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
for (ii in 1:10) print(res[[ii]])
for (ii in 1:10) print(res[[ii]]$var_model)
unlist(res)
unlist(res)[1:10]
rr = lapply(res, "[[", "var_model")
str(rr)
unlist(rr)
names(rr)
dimnames(rr)
str(rr)
rr
rrr = unlist(rr)
rrr
names(rrr)
rrm = rrr[grep("model", names(rrr))]
summary(rrm)
options(warn = 1)
res[[ii]] = autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))
vm.isotropic$var_model
vm.anisotropic$var_model
autofitVariogram(log(zinc) ~ dist, meuse)$var_model
autofitVariogram(log(zinc) ~ dist, meuse)$var_model
autofitVariogram(log(zinc) ~ dist, meuse)$var_model
autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))$var_model
autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))$var_model
autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))$var_model
debug(autofitVariogram)
autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))$var_model
debug(getModel)
options(error = recover)
options(warn = 2)
fit.variogram(experimental_variogram,
model = vgm(psill=psill, model=model, range=range,
nugget=nugget,kappa = kappa),
fit.ranges = c(fit_range), fit.sills = c(fit_nugget, fit_sill),
debug.level = 0)
debug(fit.variogram)
debug(gstat:::fit.variogram)
autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))$var_model
options(warn = 1)
autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))$var_model
options(warn = 2)
direct
?fit.variogram
vgm(10, "Exp", 300, anis = c(30, 10, 0, 0.5, 0.3))
str(vgm(10, "Exp", 300, anis = c(30, 10, 0, 0.5, 0.3)))
vv = vgm(10, "Exp", 300, anis = c(30, 10, 0, 0.5, 0.3))
attr(vv, "direct")
attr(object, "direct")
options(warn = 1)
autofitVariogram(log(zinc) ~ dist, meuse, alpha = c(0,45,90,135))$var_model
attr(object, "direct")
?variogram
str(variogram(log(zinc)~x+y, meuse, alpha=c(0,45,90,135)))
0
str(gstat:::variogram(log(zinc)~x+y, meuse, alpha=c(0,45,90,135)))
?fit.variogram
?autofitVariogram
?gstat:::fit.variogram
?autofitVariogram
